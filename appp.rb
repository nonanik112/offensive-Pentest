require 'sinatra'
require 'json'
require 'open3'
require 'sinatra/json' # JSON için ekledik

get '/' do
    erb :index
  end
  
  # Terminal komutlarını işleme
  post '/execute_terminal' do
    content_type :json
    command = JSON.parse(request.body.read)["command"]
  
    # Terminalde komut çalıştırma
    stdout, stderr, status = Open3.capture3(command)
  
    # Çıktıyı işleme
    output = status.success? ? stdout.chomp : stderr.chomp
  
    # Komut tarihçesini tutma
    File.open("command_history.txt", "a") { |file| file.puts(command) }
  
    { status: 'success', output: output }.to_json
  end
  
  # Terminal komut geçmişini alma
  get '/get_command_history' do
    content_type :json
    command_history = File.exist?("command_history.txt") ? File.read("command_history.txt") : ""
    { status: 'success', command_history: command_history }.to_json
  end
  
  # Terminal komut geçmişini temizleme
  post '/clear_command_history' do
    content_type :json
    File.delete("command_history.txt") if File.exist?("command_history.txt")
    { status: 'success' }.to_json
  end
  
  # Dosya ve dizin işlemleri
  post '/ls' do
    content_type :json
    path = JSON.parse(request.body.read)["path"]
    if Dir.exist?(path)
      files = Dir.entries(path)
      { status: 'success', files: files }.to_json
    else
      { status: 'error', message: "Dosya veya dizin bulunamadı" }.to_json
    end
  end
  
  post '/cd' do
    content_type :json
    path = JSON.parse(request.body.read)["path"]
    if Dir.exist?(path)
      Dir.chdir(path)
      { status: 'success' }.to_json
    else
      { status: 'error', message: "Dosya veya dizin bulunamadı" }.to_json
    end
  end
  
  post '/mkdir' do
    content_type :json
    path = JSON.parse(request.body.read)["path"]
    unless Dir.exist?(path)
      Dir.mkdir(path)
      { status: 'success' }.to_json
    else
      { status: 'error', message: "Dizin zaten var" }.to_json
    end
  end
  
  post '/rm' do
    content_type :json
    path = JSON.parse(request.body.read)["path"]
    if File.exist?(path)
      File.delete(path)
      { status: 'success' }.to_json
    elsif Dir.exist?(path)
      Dir.delete(path)
      { status: 'success' }.to_json
    else
      { status: 'error', message: "Dosya veya dizin bulunamadı" }.to_json
    end
  end
  
  # Kullanıcı işlemleri (örnek)
  post '/su' do
    content_type :json
    username = JSON.parse(request.body.read)["username"]
    password = JSON.parse(request.body.read)["password"]
    # Kullanıcı doğrulama mantığı burada implement edilebilir
    { status: 'success' }.to_json
  end
  
  post '/sudo' do
    content_type :json
    command = JSON.parse(request.body.read)["command"]
    # Sudo komutu mantığı burada implement edilebilir
    { status: 'success' }.to_json
  end
  
  # Paket işlemleri (örnek)
  post '/apt-get' do
    content_type :json
    command = JSON.parse(request.body.read)["command"]
    # Apt-get komutu mantığı burada implement edilebilir
    { status: 'success' }.to_json
  end

  post '/save_code' do
    content_type :json
    code = JSON.parse(request.body.read)["code"]
    File.open("saved_code.rb", "w") { |file| file.write(code) }
    { status: 'success' }.to_json
  end
  
  
__END__

@@index
<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gray Hat Cyber Developer Terminal & Documentation</title>
    <style>
    
        body {
            font-family: Arial, sans-serif;
            background-color: #2b2b2b;
            color: #ffffff;
            margin: 0;
            padding: 0;
            display: flex;
            flex-direction: column;
            height: 100vh;
        }
        .container {
            display: flex;
            flex: 1;
            padding: 10px;
            gap: 10px;
            background-color: #1e1e1e;
        }
        .terminal {
            flex: 1;
            padding: 10px;
            background-color: #000000;
            color: #00ff00;
            border: 1px solid #3c3c3c;
            border-radius: 5px;
            font-family: 'Courier New', Courier, monospace;
            overflow-y: auto;
            height: 100%;
            white-space: pre-wrap;
            word-wrap: break-word;
            outline: none; /* Odaklanma çerçevesini kaldır */
        }
        .error {
            color: red;
        }
        .editor {
            flex: 1;
            padding: 10px;
            background-color: #333333;
            border: 1px solid #3c3c3c;
            border-radius: 5px;
            color: #ffffff;
            overflow-y: auto;
            height: 100%;
            font-family: 'Courier New', Courier, monospace;
            white-space: pre-wrap;
            word-wrap: break-word;
            outline: none; /* Odaklanma çerçevesini kaldır */
        }
        .documentation {
            padding: 20px;
            background-color: #333333;
            color: #cccccc;
            border-top: 5px solid #00ff00;
            font-size: 1.2em;
            line-height: 1.6em;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            position: relative;
            overflow: hidden;
            height: 300px;
        }
        .documentation-page {
            display: none;
            width: 100%;
            height: 100%;
            background: #444444;
            color: #eeeeee;
            padding: 20px;
            box-sizing: border-box;
            position: absolute;
            overflow: auto;
            border: 1px solid #00ff00;
            border-radius: 5px;
        }
        .documentation-page.active {
            display: block;
        }
        .documentation-title {
            font-size: 1.5em;
            margin-bottom: 10px;
            font-weight: bold;
        }
        .nav-buttons {
            display: flex;
            justify-content: space-between;
            margin-top: 10px;
        }
        button {
            background-color: #27ae60;
            border: none;
            color: #ecf0f1;
            padding: 10px;
            cursor: pointer;
            font-family: inherit;
        }
        button:hover {
            background-color: #2ecc71;
        }
    </style>
</head>
<body>
<div class="container">
<div class="terminal" contenteditable="true" id="terminal" tabindex="1">
    Welcome to the Linux-like web terminal!
</div>
<div class="editor" contenteditable="true" id="editor" tabindex="2">
    # Welcome to the code editor!
</div>
</div>
    <div class="documentation">
        <div class="documentation-title">Ruby Documentation</div>
        <div id="page1" class="documentation-page active">
            <p>Sayfa 1: Ruby diline giriş</p>
        </div>
        <div id="page2" class="documentation-page">
            <p>Sayfa 2: Ruby Temel Bilgiler</p>
        </div>
        <div id="page3" class="documentation-page">
            <p>Sayfa 3: Ruby on Rails</p>
        </div>
        <div class="nav-buttons">
            <button onclick="prevPage()">Önceki Sayfa</button>
            <button onclick="nextPage()">Sonraki Sayfa</button>
        </div>
    </div>


    <script>
// Terminal komutunu gönderme işlemi
function sendCommand() {
    const terminalInput = document.getElementById('terminal');
    const command = terminalInput.innerText.trim();

    if (command) {
        fetch('/execute_terminal', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ command: command })
        })
        .then(response => response.json())
        .then(data => {
            const result = data.status === 'success' 
                ? `\n$ ${command}\n${data.output}` 
                : `\n$ ${command}\nHata: ${data.output}`;
            
            terminalInput.innerText += result;
            scrollToBottom('terminal');
        })
        .catch(error => console.error('Error:', error));
    }
}

// Terminal için "Enter" tuşuna basıldığında komutu gönderme
document.getElementById('terminal').addEventListener('keypress', function(event) {
    if (event.key === 'Enter') {
        event.preventDefault();
        sendCommand();
        this.innerText += '\n';
    }
});

// Kod editöründeki değişiklikleri kaydetme işlemi
document.getElementById('editor').addEventListener('blur', function() {
    const code = this.innerText;
    
    fetch('/save_code', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ code: code })
    })
    .catch(error => console.error('Error:', error));
});

// Terminalin her zaman en alt satırına kaydırma fonksiyonu
function scrollToBottom(elementId) {
    const element = document.getElementById(elementId);
    element.scrollTop = element.scrollHeight;
}

// Dokümantasyon sayfaları arasında gezinme
let currentPage = 1;
const totalPages = 3;

function updateDocumentation() {
    for (let i = 1; i <= totalPages; i++) {
        document.getElementById(`page${i}`).classList.toggle('active', i === currentPage);
    }
}

function prevPage() {
    if (currentPage > 1) {
        currentPage--;
        updateDocumentation();
    }
}

function nextPage() {
    if (currentPage < totalPages) {
        currentPage++;
        updateDocumentation();
    }
}

// Sayfa ilk yüklendiğinde dokümantasyonu güncelle
updateDocumentation();

    </script>
</body>
</html>